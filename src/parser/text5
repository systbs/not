static int32_t
syntax_unique_ga(graph_t *graph, symbol_t *g1, symbol_t *a1)
{
	symbol_t *gt_1;
	gt_1 = syntax_extract_with(g1, SYMBOL_TYPE);
	if (gt_1)
	{
		symbol_t *gtr_1;
		gtr_1 = syntax_reference(graph, gt_1);
		if (gtr_1)
		{
			symbol_t *an_1;
			an_1 = syntax_extract_with(a1, SYMBOL_KEY);
			if (an_1)
			{
				symbol_t *anr_1;
				anr_1 = syntax_reference(graph, an_1);
				if (anr_1)
				{
					return syntax_unique(graph, gtr_1, anr_1);
				}
				else
				{
					syntax_error(graph, an_1, "refrerence of this type not found");
					return 0;
				}
			}
			else
			{
				syntax_error(graph, a1, "refrerence of this type not found");
				return 0;
			}
		}
		else
		{
			syntax_error(graph, g1, "refrerence of this type not found");
			return 0;
		}
	}
	else
	{
		symbol_t *gv_1;
		gv_1 = syntax_extract_with(g1, SYMBOL_VALUE);
		if (gv_1)
		{
			symbol_t *gvr_1;
			gvr_1 = syntax_reference(graph, gv_1);
			if (gvr_1)
			{
				symbol_t *an_1;
				an_1 = syntax_extract_with(a1, SYMBOL_KEY);
				if (an_1)
				{
					symbol_t *anr_1;
					anr_1 = syntax_reference(graph, an_1);
					if (anr_1)
					{
						return syntax_unique(graph, gvr_1, anr_1);
					}
					else
					{
						syntax_error(graph, an_1, "refrerence of this type not found");
						return 0;
					}
				}
				else
				{
					syntax_error(graph, a1, "refrerence of this type not found");
					return 0;
				}
			}
			else
			{
				syntax_error(graph, gv_1, "refrerence of this type not found");
				return 0;
			}
		}
		else
		{
			return 1;
		}
	}
	return 1;
}

static int32_t
syntax_unique_gsas(graph_t *graph, symbol_t *gs1, symbol_t *as1)
{
	uint64_t gs1_cnt = 0;
	uint64_t as1_cnt = 0;

	symbol_t *a;
	for (a = gs1->begin;a != gs1->end;a = a->next)
	{
		if (symbol_check_type(a, SYMBOL_GENERIC))
		{
			gs1_cnt += 1;
			as1_cnt = 0;

			symbol_t *b;
			for (b = as1->begin;b != as1->end;b = b->next)
			{
				if (symbol_check_type(b, SYMBOL_ARGUMENT))
				{
					as1_cnt += 1;
					if (as1_cnt < gs1_cnt)
					{
						continue;
					}
					if (syntax_unique_ga(graph, a, b))
					{
						break;
					}
					return -1;
				}
			}
			
			if (as1_cnt < gs1_cnt)
			{
				symbol_t *value;
				value = syntax_extract_with(a, SYMBOL_VALUE);
				if (!value)
				{
					return -1;
				}
			}
		}
	}

	as1_cnt = 0;
	symbol_t *b;
	for (b = as1->begin;b != as1->end;b = b->next)
	{
		if (symbol_check_type(b, SYMBOL_ARGUMENT))
		{
			as1_cnt += 1;
			if (as1_cnt > gs1_cnt)
			{
				return -1;
			}
		}
	}

	return 1;
}

static int32_t
syntax_unique_gg(graph_t *graph, symbol_t *g1, symbol_t *g2)
{
	symbol_t *gt_1;
	gt_1 = syntax_extract_with(g1, SYMBOL_TYPE);
	if (gt_1)
	{
		symbol_t *gtr_1;
		gtr_1 = syntax_reference(graph, gt_1);
		if (gtr_1)
		{
			symbol_t *gt_2;
			gt_2 = syntax_extract_with(g2, SYMBOL_TYPE);
			if (gt_2)
			{
				symbol_t *gtr_2;
				gtr_2 = syntax_reference(graph, gt_2);
				if (gtr_2)
				{
					return syntax_unique(graph, gtr_1, gtr_2);
				}
				else
				{
					syntax_error(graph, gt_2, "refrerence of this type not found");
					return 0;
				}
			}
			else
			{
				symbol_t *gv_2;
				gv_2 = syntax_extract_with(g2, SYMBOL_VALUE);
				if (gv_2)
				{
					symbol_t *gtr_2;
					gtr_2 = syntax_reference(graph, gv_2);
					if (gtr_2)
					{
						return syntax_unique(graph, gtr_1, gtr_2);
					}
					else
					{
						syntax_error(graph, gv_2, "refrerence of this type not found");
						return 0;
					}
				}
			}
		}
		else
		{
			syntax_error(graph, gt_1, "refrerence of this type not found");
			return 0;
		}
	}
	else
	{
		symbol_t *gt_2;
		gt_2 = syntax_extract_with(g2, SYMBOL_TYPE);
		if (gt_2)
		{
			return syntax_unique_gg(graph, g2, g1);
		}
	}
	return 1;
}

static int32_t
syntax_unique_gsgs(graph_t *graph, symbol_t *gs1, symbol_t *gs2)
{
	uint64_t gs1_cnt = 0;
	uint64_t gs2_cnt = 0;

	symbol_t *a;
	for (a = gs1->begin;a != gs1->end;a = a->next)
	{
		if (symbol_check_type(a, SYMBOL_GENERIC))
		{
			gs1_cnt += 1;
			gs2_cnt = 0;

			symbol_t *b;
			for (b = gs2->begin;b != gs2->end;b = b->next)
			{
				if (symbol_check_type(b, SYMBOL_GENERIC))
				{
					gs2_cnt += 1;
					if (gs2_cnt < gs1_cnt)
					{
						continue;
					}
					if (syntax_unique_gg(graph, a, b))
					{
						break;
					}
					return -1;
				}
			}
			
			if (gs2_cnt < gs1_cnt)
			{
				symbol_t *value;
				value = syntax_extract_with(a, SYMBOL_VALUE);
				if (!value)
				{
					return -1;
				}
			}
		}
	}

	gs2_cnt = 0;
	symbol_t *b;
	for (b = gs2->begin;b != gs2->end;b = b->next)
	{
		if (symbol_check_type(b, SYMBOL_GENERIC))
		{
			gs2_cnt += 1;
			if (gs2_cnt > gs1_cnt)
			{
				symbol_t *value;
				value = syntax_extract_with(b, SYMBOL_VALUE);
				if (!value)
				{
					return -1;
				}
			}
		}
	}

	return 1;
}

static int32_t
syntax_unique_pp(graph_t *graph, symbol_t *p1, symbol_t *p2)
{
	symbol_t *pt1;
	pt1 = syntax_extract_with(p1, SYMBOL_TYPE);
	if (pt1)
	{
		symbol_t *ptr1;
		ptr1 = syntax_reference(graph, pt1);
		if (ptr1)
		{
			symbol_t *pt2;
			pt2 = syntax_extract_with(p2, SYMBOL_TYPE);
			if (pt2)
			{
				symbol_t *ptr2;
				ptr2 = syntax_reference(graph, p2);
				if (ptr2)
				{
					return syntax_unique(graph, ptr1, ptr2);
				}
				else
				{
					syntax_error(graph, pt2, "refrerence of this type not found");
					return 0;
				}
			}
			else
			{
				symbol_t *pv2;
				pv2 = syntax_extract_with(p2, SYMBOL_VALUE);
				if (pv2)
				{
					symbol_t *pvr2;
					pvr2 = syntax_reference(graph, pv2);
					if (pvr2)
					{
						return syntax_unique(graph, ptr1, pvr2);
					}
					else
					{
						syntax_error(graph, pv2, "refrerence of this type not found");
						return 0;
					}
				}
			}
		}
		else
		{
			syntax_error(graph, pt1, "refrerence of this type not found");
			return 0;
		}
	}
	else
	{
		symbol_t *pt2;
		pt2 = syntax_extract_with(p2, SYMBOL_TYPE);
		if (pt2)
		{
			return syntax_unique_gg(graph, p2, p1);
		}
	}
	return 1;
}

static int32_t
syntax_unique_psps(graph_t *graph, symbol_t *ps1, symbol_t *ps2)
{
	uint64_t ps1_cnt = 0;
	uint64_t ps2_cnt = 0;

	symbol_t *a;
	for (a = ps1->begin;a != ps1->end;a = a->next)
	{
		if (symbol_check_type(a, SYMBOL_PARAMETER))
		{
			ps1_cnt += 1;
			ps2_cnt = 0;

			symbol_t *b;
			for (b = ps2->begin;b != ps2->end;b = b->next)
			{
				if (symbol_check_type(b, SYMBOL_PARAMETER))
				{
					ps2_cnt += 1;
					if (ps2_cnt < ps1_cnt)
					{
						continue;
					}
					if (syntax_unique_pp(graph, a, b))
					{
						break;
					}
					return -1;
				}
			}
			
			if (ps2_cnt < ps1_cnt)
			{
				symbol_t *value;
				value = syntax_extract_with(a, SYMBOL_VALUE);
				if (!value)
				{
					return -1;
				}
			}
		}
	}

	ps2_cnt = 0;
	symbol_t *b;
	for (b = ps2->begin;b != ps2->end;b = b->next)
	{
		if (symbol_check_type(b, SYMBOL_GENERIC))
		{
			ps2_cnt += 1;
			if (ps2_cnt > ps1_cnt)
			{
				symbol_t *value;
				value = syntax_extract_with(b, SYMBOL_VALUE);
				if (!value)
				{
					return -1;
				}
			}
		}
	}

	return 1;
}

static int32_t
syntax_unique_aa(graph_t *graph, symbol_t *a1, symbol_t *a2)
{
	symbol_t *an1;
	an1 = syntax_extract_with(a1, SYMBOL_KEY);
	if (an1)
	{
		symbol_t *anr1;
		anr1 = syntax_reference(graph, an1);
		if (anr1)
		{
			symbol_t *an2;
			an2 = syntax_extract_with(a2, SYMBOL_KEY);
			if (an2)
			{
				symbol_t *anr2;
				anr2 = syntax_reference(graph, an2);
				if (anr2)
				{
					return syntax_unique(graph, anr1, anr2);
				}
				else
				{
					syntax_error(graph, an2, "refrerence of this type not found");
					return 0;
				}
			}
			else
			{
				syntax_error(graph, a2, "refrerence of this type not found");
				return 0;
			}
		}
		else
		{
			syntax_error(graph, a1, "refrerence of this type not found");
			return 0;
		}
	}
	else
	{
		syntax_error(graph, a1, "argument without type");
		return 0;
	}
	return 1;
}

static int32_t
syntax_unique_asas(graph_t *graph, symbol_t *as1, symbol_t *as2)
{
	uint64_t as1_cnt = 0;
	uint64_t as2_cnt = 0;

	symbol_t *a;
	for (a = as1->begin;a != as1->end;a = a->next)
	{
		if (symbol_check_type(a, SYMBOL_ARGUMENT))
		{
			as1_cnt += 1;
			as2_cnt = 0;

			symbol_t *b;
			for (b = as2->begin;b != as2->end;b = b->next)
			{
				if (symbol_check_type(b, SYMBOL_ARGUMENT))
				{
					as2_cnt += 1;
					if (as2_cnt < as1_cnt)
					{
						continue;
					}
					if (syntax_unique_aa(graph, a, b))
					{
						break;
					}
					return -1;
				}
			}
		}
	}

	as2_cnt = 0;
	symbol_t *b;
	for (b = as2->begin;b != as2->end;b = b->next)
	{
		if (symbol_check_type(b, SYMBOL_ARGUMENT))
		{
			as2_cnt += 1;
			if (as2_cnt > as1_cnt)
			{
				return -1;
			}
		}
	}

	return 1;
}

static int32_t
syntax_unique(graph_t *graph, symbol_t *s1, symbol_t *s2)
{
	symbol_t *cn;
	cn = syntax_extract_with(s1, SYMBOL_KEY);
	if (cn)
	{
		symbol_t *tn;
		tn = syntax_extract_with(s2, SYMBOL_KEY);
		if (tn)
		{
			if (symbol_check_type(s1, SYMBOL_CLASS))
			{
				if (symbol_check_type(s2, SYMBOL_CLASS))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								return syntax_unique_gsgs(graph, gsc, gst);
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 1;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 1;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_METHOD))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								return syntax_unique_gsgs(graph, gsc, gst);
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 1;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 1;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FUNCTION))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								return syntax_unique_gsgs(graph, gsc, gst);
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 1;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 1;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FIELD))
				{
					if (symbol_check_type(tn, SYMBOL_COMPOSITE))
					{
						symbol_t *ntn;
						ntn = syntax_extract_with(tn, SYMBOL_KEY);
						if (ntn)
						{
							symbol_t *astn;
							astn = syntax_extract_with(tn, SYMBOL_ARGUMENTS);
							if (astn)
							{
								symbol_t *gsc;
								gsc = syntax_only_with(s1, SYMBOL_GENERICS);
								if (gsc)
								{
									return syntax_unique_gsas(graph, gsc, astn);
								}
								return -1;
							}
							else
							{
								syntax_error(graph, tn, "does not include the arguments field");
								return 0;
							}
						}
						else
						{
							syntax_error(graph, tn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						if (symbol_check_type(tn, SYMBOL_ID))
						{
							int32_t r;
							r = syntax_comparison_id(cn, tn);
							if (r)
							{
								symbol_t *gsc;
								gsc = syntax_only_with(s1, SYMBOL_GENERICS);
								if (gsc)
								{
									symbol_t *b;
									for (b = gsc->begin;b != gsc->end;b = b->next)
									{
										if (symbol_check_type(b, SYMBOL_GENERIC))
										{
											symbol_t *bv;
											bv = syntax_only_with(b, SYMBOL_VALUE);
											if (!bv)
											{
												return -1;
											}
										}
									}
								}
								return 1;
							}
						}
						else
						{
							syntax_error(graph, tn, "the name not an id");
							return 0;
						}
					}
				}
				else
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *b;
							for (b = gsc->begin;b != gsc->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
						}
						return 1;
					}
					return -1;
				}
			}
			else
			if (symbol_check_type(s1, SYMBOL_METHOD))
			{
				if (symbol_check_type(s2, SYMBOL_CLASS))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								return syntax_unique_gsgs(graph, gsc, gst);
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 0;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 0;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_METHOD))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								r = syntax_unique_gsgs(graph, gsc, gst);
								if (r > 0)
								{
									symbol_t *psc;
									psc = syntax_extract_with(s1, SYMBOL_PARAMETERS);
									if (psc)
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											return syntax_unique_psps(graph, psc, pst);
										}
										return -1;
									}
									else
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											if (symbol_count(pst) > 0)
											{
												return -1;
											}
										}
										return 1;
									}
								}
								return r;
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 0;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 0;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FUNCTION))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								r = syntax_unique_gsgs(graph, gsc, gst);
								if (r > 0)
								{
									symbol_t *psc;
									psc = syntax_extract_with(s1, SYMBOL_PARAMETERS);
									if (psc)
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											return syntax_unique_psps(graph, psc, pst);
										}
										return -1;
									}
									else
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											if (symbol_count(pst) > 0)
											{
												return -1;
											}
										}
										return 1;
									}
								}
								return r;
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 0;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 0;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FIELD))
				{
					if (symbol_check_type(tn, SYMBOL_COMPOSITE))
					{
						symbol_t *ntn;
						ntn = syntax_extract_with(tn, SYMBOL_KEY);
						if (ntn)
						{
							symbol_t *astn;
							astn = syntax_extract_with(tn, SYMBOL_ARGUMENTS);
							if (astn)
							{
								symbol_t *gsc;
								gsc = syntax_only_with(s1, SYMBOL_GENERICS);
								if (gsc)
								{
									return syntax_unique_gsas(graph, gsc, astn);
								}
								return -1;
							}
							else
							{
								syntax_error(graph, tn, "does not include the arguments field");
								return 0;
							}
						}
						else
						{
							syntax_error(graph, tn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						if (symbol_check_type(tn, SYMBOL_ID))
						{
							int32_t r;
							r = syntax_comparison_id(cn, tn);
							if (r)
							{
								symbol_t *gsc;
								gsc = syntax_only_with(s1, SYMBOL_GENERICS);
								if (gsc)
								{
									symbol_t *b;
									for (b = gsc->begin;b != gsc->end;b = b->next)
									{
										if (symbol_check_type(b, SYMBOL_GENERIC))
										{
											symbol_t *bv;
											bv = syntax_only_with(b, SYMBOL_VALUE);
											if (!bv)
											{
												return -1;
											}
										}
									}
								}
								return 0;
							}
						}
						else
						{
							syntax_error(graph, tn, "the name not an id");
							return 0;
						}
					}
				}
				else
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *b;
							for (b = gsc->begin;b != gsc->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
						}
						return 1;
					}
					return -1;
				}
			}
			else
			if (symbol_check_type(s1, SYMBOL_FUNCTION))
			{
				if (symbol_check_type(s2, SYMBOL_CLASS))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								return syntax_unique_gsgs(graph, gsc, gst);
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 0;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 0;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_METHOD))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								r = syntax_unique_gsgs(graph, gsc, gst);
								if (r > 0)
								{
									symbol_t *psc;
									psc = syntax_extract_with(s1, SYMBOL_PARAMETERS);
									if (psc)
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											return syntax_unique_psps(graph, psc, pst);
										}
										return -1;
									}
									else
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											if (symbol_count(pst) > 0)
											{
												return -1;
											}
										}
										return 1;
									}
								}
								return r;
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 0;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 0;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FUNCTION))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								r = syntax_unique_gsgs(graph, gsc, gst);
								if (r > 0)
								{
									symbol_t *psc;
									psc = syntax_extract_with(s1, SYMBOL_PARAMETERS);
									if (psc)
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											return syntax_unique_psps(graph, psc, pst);
										}
										return -1;
									}
									else
									{
										symbol_t *pst;
										pst = syntax_extract_with(s2, SYMBOL_PARAMETERS);
										if (pst)
										{
											if (symbol_count(pst) > 0)
											{
												return -1;
											}
										}
										return 1;
									}
								}
								return r;
							}
							else
							{
								symbol_t *b;
								for (b = gsc->begin;b != gsc->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
								return 0;
							}
						}
						else
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 0;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FIELD))
				{
					if (symbol_check_type(tn, SYMBOL_COMPOSITE))
					{
						symbol_t *ntn;
						ntn = syntax_extract_with(tn, SYMBOL_KEY);
						if (ntn)
						{
							symbol_t *astn;
							astn = syntax_extract_with(tn, SYMBOL_ARGUMENTS);
							if (astn)
							{
								symbol_t *gsc;
								gsc = syntax_only_with(s1, SYMBOL_GENERICS);
								if (gsc)
								{
									return syntax_unique_gsas(graph, gsc, astn);
								}
								return -1;
							}
							else
							{
								syntax_error(graph, tn, "does not include the arguments field");
								return 0;
							}
						}
						else
						{
							syntax_error(graph, tn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						if (symbol_check_type(tn, SYMBOL_ID))
						{
							int32_t r;
							r = syntax_comparison_id(cn, tn);
							if (r)
							{
								symbol_t *gsc;
								gsc = syntax_only_with(s1, SYMBOL_GENERICS);
								if (gsc)
								{
									symbol_t *b;
									for (b = gsc->begin;b != gsc->end;b = b->next)
									{
										if (symbol_check_type(b, SYMBOL_GENERIC))
										{
											symbol_t *bv;
											bv = syntax_only_with(b, SYMBOL_VALUE);
											if (!bv)
											{
												return -1;
											}
										}
									}
								}
								return 0;
							}
						}
						else
						{
							syntax_error(graph, tn, "the name not an id");
							return 0;
						}
					}
				}
				else
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *b;
							for (b = gsc->begin;b != gsc->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
						}
						return 1;
					}
					return -1;
				}
			}
			else
			if (symbol_check_type(s1, SYMBOL_FIELD))
			{
				if (symbol_check_type(s2, SYMBOL_FIELD))
				{
					if (symbol_check_type(cn, SYMBOL_COMPOSITE))
					{
						symbol_t *cnn;
						cnn = syntax_extract_with(cn, SYMBOL_KEY);
						if (cnn)
						{
							if (symbol_check_type(tn, SYMBOL_COMPOSITE))
							{
								symbol_t *tnn;
								tnn = syntax_extract_with(tn, SYMBOL_KEY);
								if (tnn)
								{
									if (symbol_check_type(cnn, SYMBOL_ID))
									{
										if (symbol_check_type(tnn, SYMBOL_ID))
										{
											int32_t r;
											r = syntax_comparison_id(cn, tn);
											if (r)
											{
												symbol_t *cnna;
												cnna = syntax_only_with(cnn, SYMBOL_ARGUMENTS);
												if (cnna)
												{
													symbol_t *tnna;
													tnna = syntax_only_with(tnn, SYMBOL_ARGUMENTS);
													if (tnna)
													{
														return syntax_unique_asas(graph, cnna, tnna);
													}
													else
													{
														syntax_error(graph, tnna, "missing arguments");
														return 0;
													}
												}
												else
												{
													syntax_error(graph, cnna, "missing arguments");
													return 0;
												}
											}
											return -1;
										}
										else
										{
											syntax_error(graph, tnn, "the name not an id");
											return 0;
										}
									}
									else
									{
										syntax_error(graph, cnn, "the name not an id");
										return 0;
									}
								}
								else
								{
									syntax_error(graph, tn, "does not include the name field");
									return 0;
								}
							}
							else
							{
								return -1;
							}
						}
						else
						{
							syntax_error(graph, cn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						if (symbol_check_type(tn, SYMBOL_COMPOSITE))
						{
							return -1;
						}
						else
						{
							int32_t r;
							r = syntax_comparison_id(cn, tn);
							if (r)
							{
								return 1;
							}
							return -1;
						}
					}
				}
				else
				if (symbol_check_type(s2, SYMBOL_CLASS))
				{
					if (symbol_check_type(cn, SYMBOL_COMPOSITE))
					{
						symbol_t *cnn;
						cnn = syntax_extract_with(cn, SYMBOL_KEY);
						if (cnn)
						{
							if (symbol_check_type(cnn, SYMBOL_ID))
							{
								int32_t r;
								r = syntax_comparison_id(cnn, tn);
								if (r)
								{
									symbol_t *cnna;
									cnna = syntax_only_with(cnn, SYMBOL_ARGUMENTS);
									if (cnna)
									{
										symbol_t *gst;
										gst = syntax_only_with(s2, SYMBOL_GENERICS);
										if (gst)
										{
											return syntax_unique_gsas(graph, gst, cnna);
										}
										else
										{
											return -1;
										}
									}
									else
									{
										syntax_error(graph, cnna, "missing arguments");
										return 0;
									}
								}
								return -1;
							}
							else
							{
								syntax_error(graph, cnn, "the name not an id");
								return 0;
							}
						}
						else
						{
							syntax_error(graph, cn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						int32_t r;
						r = syntax_comparison_id(cn, tn);
						if (r)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 1;
						}
						return -1;
					}
				}
				else
				if (symbol_check_type(s2, SYMBOL_METHOD))
				{
					if (symbol_check_type(cn, SYMBOL_COMPOSITE))
					{
						symbol_t *cnn;
						cnn = syntax_extract_with(cn, SYMBOL_KEY);
						if (cnn)
						{
							if (symbol_check_type(cnn, SYMBOL_ID))
							{
								int32_t r;
								r = syntax_comparison_id(cnn, tn);
								if (r)
								{
									symbol_t *cnna;
									cnna = syntax_only_with(cnn, SYMBOL_ARGUMENTS);
									if (cnna)
									{
										symbol_t *gst;
										gst = syntax_only_with(s2, SYMBOL_GENERICS);
										if (gst)
										{
											return syntax_unique_gsas(graph, gst, cnna);
										}
										else
										{
											return -1;
										}
									}
									else
									{
										syntax_error(graph, cnna, "missing arguments");
										return 0;
									}
								}
								return -1;
							}
							else
							{
								syntax_error(graph, cnn, "the name not an id");
								return 0;
							}
						}
						else
						{
							syntax_error(graph, cn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						int32_t r;
						r = syntax_comparison_id(cn, tn);
						if (r)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 1;
						}
						return -1;
					}
				}
				else
				if (symbol_check_type(s2, SYMBOL_FUNCTION))
				{
					if (symbol_check_type(cn, SYMBOL_COMPOSITE))
					{
						symbol_t *cnn;
						cnn = syntax_extract_with(cn, SYMBOL_KEY);
						if (cnn)
						{
							if (symbol_check_type(cnn, SYMBOL_ID))
							{
								int32_t r;
								r = syntax_comparison_id(cnn, tn);
								if (r)
								{
									symbol_t *cnna;
									cnna = syntax_only_with(cnn, SYMBOL_ARGUMENTS);
									if (cnna)
									{
										symbol_t *gst;
										gst = syntax_only_with(s2, SYMBOL_GENERICS);
										if (gst)
										{
											return syntax_unique_gsas(graph, gst, cnna);
										}
										else
										{
											return -1;
										}
									}
									else
									{
										syntax_error(graph, cnna, "missing arguments");
										return 0;
									}
								}
								return -1;
							}
							else
							{
								syntax_error(graph, cnn, "the name not an id");
								return 0;
							}
						}
						else
						{
							syntax_error(graph, cn, "does not include the name field");
							return 0;
						}
					}
					else
					{
						int32_t r;
						r = syntax_comparison_id(cn, tn);
						if (r)
						{
							symbol_t *gst;
							gst = syntax_only_with(s2, SYMBOL_GENERICS);
							if (gst)
							{
								symbol_t *b;
								for (b = gst->begin;b != gst->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											return -1;
										}
									}
								}
							}
							return 1;
						}
						return -1;
					}
				}
				else
				{
					if (symbol_check_type(cn, SYMBOL_COMPOSITE))
					{
						return -1;
					}
					else
					{
						if (symbol_check_type(cn, SYMBOL_ID))
						{
							int32_t r;
							r = syntax_comparison_id(cn, tn);
							if (r)
							{
								return 1;
							}
							return -1;
						}
						else
						{
							syntax_error(graph, cn, "the name not an id");
							return 0;
						}
					}
				}
			}
			else
			{
				if (symbol_check_type(s2, SYMBOL_CLASS))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gst;
						gst = syntax_only_with(s2, SYMBOL_GENERICS);
						if (gst)
						{
							symbol_t *b;
							for (b = gst->begin;b != gst->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
							return 1;
						}
						else
						{
							return 1;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_METHOD))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gst;
						gst = syntax_only_with(s2, SYMBOL_GENERICS);
						if (gst)
						{
							symbol_t *b;
							for (b = gst->begin;b != gst->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
							return 1;
						}
						else
						{
							return 1;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FUNCTION))
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gst;
						gst = syntax_only_with(s2, SYMBOL_GENERICS);
						if (gst)
						{
							symbol_t *b;
							for (b = gst->begin;b != gst->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
							return 1;
						}
						else
						{
							return 1;
						}
					}
					return -1;
				}
				else
				if (symbol_check_type(s2, SYMBOL_FIELD))
				{
					if (symbol_check_type(tn, SYMBOL_COMPOSITE))
					{
						return -1;
					}
					else
					{
						if (symbol_check_type(tn, SYMBOL_ID))
						{
							int32_t r;
							r = syntax_comparison_id(cn, tn);
							if (r)
							{
								return 1;
							}
							return -1;
						}
						else
						{
							syntax_error(graph, tn, "the name not an id");
							return 0;
						}
					}
				}
				else
				{
					int32_t r;
					r = syntax_comparison_id(cn, tn);
					if (r)
					{
						symbol_t *gsc;
						gsc = syntax_only_with(s1, SYMBOL_GENERICS);
						if (gsc)
						{
							symbol_t *b;
							for (b = gsc->begin;b != gsc->end;b = b->next)
							{
								if (symbol_check_type(b, SYMBOL_GENERIC))
								{
									symbol_t *bv;
									bv = syntax_only_with(b, SYMBOL_VALUE);
									if (!bv)
									{
										return -1;
									}
								}
							}
						}
						return 1;
					}
					return -1;
				}
			}
		}
		else
		{
			syntax_error(graph, s2, "does not include the name field");
			return 0;
		}
	}
	else
	{
		syntax_error(graph, s1, "does not include the name field");
		return 0;
	}

	return 1;
}





static symbol_t *
syntax_in_backward(symbol_t *t1, symbol_t *t2)
{
	if (t1 == t2)
	{
		return t2;
	}
	if (t2->parent)
	{
		return syntax_in_backward(t1, t2->parent);
	}
	return NULL;
}

static symbol_t *
syntax_reference_in_scope(graph_t *graph, symbol_t *base, symbol_t *t1, symbol_t *arguments, int32_t route)
{
	symbol_t *a;
	for (a = base->begin;(a != base->end);a = a->next)
	{
		if (symbol_check_type(a, SYMBOL_CLASS))
		{
			symbol_t *an;
			an = syntax_extract_with(a, SYMBOL_KEY);
			if (an)
			{
				symbol_t *tn1;
				tn1 = syntax_extract_with(t1, SYMBOL_KEY);
				if (tn1)
				{
					if (syntax_comparison_id(an, tn1))
					{
						symbol_t *gs;
						gs = syntax_only_with(a, SYMBOL_GENERICS);
						if (gs)
						{
							if (arguments)
							{
								if (syntax_gsas(graph, gs, arguments))
								{
									goto region_access;
								}
								continue;
							}
							else
							{
								int32_t no_match = 0;
								symbol_t *b;
								for (b = gs->begin;b != gs->end;b = b->next)
								{
									if (symbol_check_type(b, SYMBOL_GENERIC))
									{
										symbol_t *bv;
										bv = syntax_only_with(b, SYMBOL_VALUE);
										if (!bv)
										{
											no_match = 1;
											break;
										}
									}
								}
								if (no_match)
								{
									goto region_access;
								}
							}
						}
						else
						{
							if (arguments)
							{
								continue;
							}
							goto region_access;
						}
					}
					continue;
				}
				else
				{
					syntax_error(graph, t1, "does not include the name field");
					return NULL;
				}
			}
			else
			{
				syntax_error(graph, a, "does not include the name field");
				return NULL;
			}
		}
		
		continue;
region_access:
		if ((route == (route & SYNTAX_ROUTE_FORWARD)))
		{
			if (!syntax_in_backward(base, a))
			{
				if (symbol_check_type(a, SYMBOL_CLASS))
				{
					node_class_t *class = a->declaration->value;
					if ((class->flag & PARSER_MODIFIER_EXPORT) != PARSER_MODIFIER_EXPORT)
					{
						syntax_error(graph, a, "private access");
						return NULL;
					}
				}
			}
		}
	}

	if (base->parent && (route == (route & SYNTAX_ROUTE_NONE)))
	{
		return syntax_reference_in_scope(graph, base->parent, t1, arguments, route);
	}

	return NULL;
}

static symbol_t *
syntax_reference_by_arguments(graph_t *graph, symbol_t *base, symbol_t *t1, symbol_t *arguments, int32_t route)
{
	if (symbol_check_type(t1, SYMBOL_ATTR))
	{
		symbol_t *left;
		left = syntax_extract_with(t1, SYMBOL_LEFT);
		if (left)
		{
			symbol_t *right;
			right = syntax_extract_with(t1, SYMBOL_RIGHT);
			if (right)
			{
				symbol_t *r1;
				r1 = syntax_reference_by_arguments(graph, base, left, NULL, route);
				if (r1)
				{
					symbol_t *r2;
					r2 = syntax_reference_by_arguments(graph, r1, right, arguments, SYNTAX_ROUTE_FORWARD);
					if (r2)
					{
						return r2;
					}
					else
					{
						syntax_error(graph, right, "field not found in (%lld:%lld)",
							r1->declaration->position.line, r1->declaration->position.column);
						return NULL;
					}
				}
				else
				{
					syntax_error(graph, left, "field not found");
					return NULL;
				}
			}
			else
			{
				syntax_error(graph, t1, "attribute does not include the right field");
				return NULL;
			}
		}
		else
		{
			syntax_error(graph, t1, "attribute does not include the left field");
			return NULL;
		}
	}
	else 
	if (symbol_check_type(t1, SYMBOL_COMPOSITE))
	{
		symbol_t *name;
		name = syntax_extract_with(t1, SYMBOL_KEY);
		if (name)
		{
			symbol_t *arguments1;
			arguments1 = syntax_extract_with(t1, SYMBOL_ARGUMENTS);
			if (arguments1)
			{
				symbol_t *r1;
				r1 = syntax_reference_by_arguments(graph, base, name, arguments1, route);
				if (r1)
				{
					return r1;
				}
				else
				{
					syntax_error(graph, name, "field not found");
					return NULL;
				}
			}
			else
			{
				syntax_error(graph, t1, "attribute does not include the arguments field");
				return NULL;
			}
		}
		else
		{
			syntax_error(graph, t1, "attribute does not include the name field");
			return NULL;
		}
	}
	else
	if (symbol_check_type(t1, SYMBOL_ID))
	{
		symbol_t *r;
		r = syntax_reference_in_scope(graph, base, t1, arguments, route);
		if (r)
		{
			return r;
		}
		else
		{
			syntax_error(graph, t1, "reference not found");
			return NULL;
		}
	}
	else
	{
		syntax_error(graph, t1, "the reference is not a routable");
		return NULL;
	}
}

static symbol_t *
syntax_reference(graph_t *graph, symbol_t *t1)
{
	return syntax_reference_by_arguments(graph, t1->parent, t1, NULL, SYNTAX_ROUTE_NONE);
}

static int32_t
syntax_unique(graph_t *graph, symbol_t *s1, symbol_t *s2);

static int32_t
syntax_unique_gsas(graph_t *graph, symbol_t *gs1, symbol_t *as1);

static int32_t
syntax_unique_gsgs(graph_t *graph, symbol_t *gs1, symbol_t *gs2);

static int32_t
syntax_unique_asas(graph_t *graph, symbol_t *as1, symbol_t *as2);

static int32_t
syntax_unique_psps(graph_t *graph, symbol_t *ps1, symbol_t *ps2);


