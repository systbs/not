 node_binary_t *binary1 = (node_binary_t *)node->value;

        list_t *response1 = list_create();
        if (response1 == NULL)
        {
            fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
            return -1;
        }

        int32_t r1 = semantic_expression(program, binary1->left, response1, SEMANTIC_FLAG_NONE);
        if (r1 == -1)
        {
            return -1;
        }
        else
        {
            uint64_t cnt_response1 = 0;

            ilist_t *a1;
            for (a1 = response1->begin;a1 != response1->end;a1 = a1->next)
            {
                cnt_response1 += 1;

                node_t *item1 = (node_t *)a1->value;

                if (item1->kind == NODE_KIND_VAR)
                {
                    node_var_t *var1 = (node_var_t *)item1->value;

                    list_t *response2 = list_create();
                    if (response2 == NULL)
                    {
                        fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                        return -1;
                    }

                    int32_t r2 = semantic_expression(program, node, response2, SEMANTIC_FLAG_NONE);
                    if (r2 == -1)
                    {
                        return -1;
                    }
                    else
                    {
                        uint64_t cnt_response2 = 0;

                        ilist_t *a2;
                        for (a2 = response2->begin;a2 != response2->end;a2 = a2->next)
                        {
                            cnt_response2 += 1;

                            node_t *item2 = (node_t *)a2->value;

                            if (item2->kind == NODE_KIND_VAR)
                            {
                                node_var_t *var2 = (node_var_t *)item2->value;
                                if (var2->value_update != NULL)
                                {
                                    node_t *node1 = var2->value_update;

                                    if (var1->type != NULL)
                                    {
                                        node_t *node2 = var1->type;
                                        if (node2->kind == NODE_KIND_FN)
                                        {
                                            if (node1->kind == NODE_KIND_LAMBDA)
                                            {
                                                node_fn_t *fn1 = (node_fn_t *)node2->value;
                                                node_fun_t *fun1 = (node_fun_t *)node1->value;
                                                int32_t r3 = semantic_eqaul_gsgs(program, fn1->generics, fun1->generics);
                                                if (r3 == -1)
                                                {
                                                    return -1;
                                                }
                                                else
                                                if (r3 == 0)
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                                if (r3 == 1)
                                                {
                                                    int32_t r4 = semantic_eqaul_psps(program, fn1->parameters, fun1->parameters);
                                                    if (r4 == -1)
                                                    {
                                                        return -1;
                                                    }
                                                    else
                                                    if (r4 == 0)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            list_t *response3 = list_create();
                                            if (response3 == NULL)
                                            {
                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                return -1;
                                            }

                                            int32_t r3 = semantic_content(program, var1->type, response3, SEMANTIC_FLAG_NONE);
                                            if (r3 == -1)
                                            {
                                                return -1;
                                            }
                                            else
                                            {
                                                uint64_t cnt_response3 = 0;

                                                ilist_t *a3;
                                                for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                                {
                                                    cnt_response3 += 1;

                                                    node_t *item3 = (node_t *)a3->value;
                                                    if (item3->kind == NODE_KIND_CLASS)
                                                    {
                                                        if (node1->kind == NODE_KIND_CLASS)
                                                        {
                                                            if (item3->id != node1->id)
                                                            {
                                                                node_class_t *class1 = (node_class_t *)item3->value;
                                                                node_t *node3 = class1->annotation;

                                                                int32_t found1 = 0;
                                                                while (node3 != NULL)
                                                                {
                                                                    node_note_t *note1 = (node_note_t *)node3->value;
                                                                    if (semantic_idstrcmp(note1->key, "General") == 1)
                                                                    {
                                                                        found1 = 1;
                                                                    }
                                                                    else
                                                                    if (semantic_idstrcmp(note1->key, "Union") == 1)
                                                                    {
                                                                        node_t *node4 = note1->arguments;
                                                                        node_block_t *block1 = (node_block_t *)node4->value;

                                                                        ilist_t *a4;
                                                                        for (a4 = block1->list->begin;a4 != block1->list->end;a4 = a4->next)
                                                                        {
                                                                            node_t *item4 = (node_t *)a4->value;
                                                                            if (item4->kind == NODE_KIND_ARGUMENT)
                                                                            {
                                                                                node_argument_t *argument1 = (node_argument_t *)item4->value;
                                                                                
                                                                                list_t *response4 = list_create();
                                                                                if (response4 == NULL)
                                                                                {
                                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }

                                                                                int32_t r4 = semantic_content(program, argument1->key, response4, SEMANTIC_FLAG_NONE);
                                                                                if (r4 == -1)
                                                                                {
                                                                                    return -1;
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint64_t cnt_response4 = 0;

                                                                                    ilist_t *a5;
                                                                                    for (a5 = response4->begin;a5 != response4->end;a5 = a5->next)
                                                                                    {
                                                                                        cnt_response4 += 1;

                                                                                        node_t *item5 = (node_t *)a5->value;
                                                                                        if (item5->kind == NODE_KIND_CLASS)
                                                                                        {
                                                                                            if ((item5->flag & NODE_FLAG_INSTANCE) == NODE_FLAG_INSTANCE)
                                                                                            {
                                                                                                semantic_error(program, item5, "Instance object, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                                    argument1->key->position.path, argument1->key->position.line, argument1->key->position.column, __FILE__, __LINE__);
                                                                                                return -1;
                                                                                            }
                                                                                            if (item5->id == node1->id)
                                                                                            {
                                                                                                found1 = 1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (cnt_response4 == 0)
                                                                                    {
                                                                                        semantic_error(program, argument1->key, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                                        return -1;
                                                                                    }
                                                                                }

                                                                                list_destroy(response4);
                                                                            }
                                                                        }        
                                                                    }

                                                                    node3 = note1->next;
                                                                }

                                                                if (found1 == 0)
                                                                {
                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                    }
                                                    else
                                                    if (item3->kind == NODE_KIND_GENERIC)
                                                    {
                                                        node_t *node3 = item3;
                                                        while (node3 != NULL)
                                                        {
                                                            node_generic_t *generic1 = (node_generic_t *)node3->value;
                                                            if (generic1->type != NULL)
                                                            {
                                                                list_t *response4 = list_create();
                                                                if (response4 == NULL)
                                                                {
                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                    return -1;
                                                                }

                                                                int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                                if (r4 == -1)
                                                                {
                                                                    return -1;
                                                                }
                                                                else
                                                                {
                                                                    uint64_t cnt_response4 = 0;

                                                                    ilist_t *a4;
                                                                    for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                    {
                                                                        cnt_response4 += 1;

                                                                        node_t *item4 = (node_t *)a4->value;
                                                                        if (item4->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            if (node1->kind == NODE_KIND_CLASS)
                                                                            {
                                                                                if (item4->id != node1->id)
                                                                                {
                                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                        }
                                                                        else
                                                                        if (item4->kind == NODE_KIND_GENERIC)
                                                                        {
                                                                            node3 = item4;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (cnt_response4 == 0)
                                                                    {
                                                                        semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                        return -1;
                                                                    }
                                                                }

                                                                list_destroy(response4);
                                                            }
                                                        }
                                                    }
                                                }

                                                if (cnt_response3 == 0)
                                                {
                                                    semantic_error(program, var1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }

                                            list_destroy(response3);
                                        }
                                    }
                                    else
                                    {
                                        if (var1->value_update != NULL)
                                        {
                                            node_t *node2 = var1->value_update;
                                            if (node2->kind == NODE_KIND_CLASS)
                                            {
                                                if (node1->kind == NODE_KIND_CLASS)
                                                {
                                                    if (node1->id != node2->id)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                                else
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            semantic_error(program, var1->key, "Unitialized\n\tInternal:%s-%u" __FILE__, __LINE__);
                                            return -1;
                                        }
                                    }
                                    
                                    var1->value_update = var2->value_update;
                                    list_destroy(response2);
                                    list_destroy(response1);
                                    return 1;
                                }
                                else
                                {
                                    semantic_error(program, var2->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                    return -1;
                                }
                            }
                            else
                            if (item2->kind == NODE_KIND_ENTITY)
                            {
                                node_entity_t *entity1 = (node_entity_t *)item2->value;
                                if (entity1->value_update != NULL)
                                {
                                    node_t *node1 = entity1->value_update;

                                    if (var1->type != NULL)
                                    {
                                        node_t *node2 = var1->type;
                                        if (node2->kind == NODE_KIND_FN)
                                        {
                                            if (node1->kind == NODE_KIND_LAMBDA)
                                            {
                                                node_fn_t *fn1 = (node_fn_t *)node2->value;
                                                node_fun_t *fun1 = (node_fun_t *)node1->value;
                                                int32_t r3 = semantic_eqaul_gsgs(program, fn1->generics, fun1->generics);
                                                if (r3 == -1)
                                                {
                                                    return -1;
                                                }
                                                else
                                                if (r3 == 0)
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                                if (r3 == 1)
                                                {
                                                    int32_t r4 = semantic_eqaul_psps(program, fn1->parameters, fun1->parameters);
                                                    if (r4 == -1)
                                                    {
                                                        return -1;
                                                    }
                                                    else
                                                    if (r4 == 0)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            list_t *response3 = list_create();
                                            if (response3 == NULL)
                                            {
                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                return -1;
                                            }

                                            int32_t r3 = semantic_content(program, var1->type, response3, SEMANTIC_FLAG_NONE);
                                            if (r3 == -1)
                                            {
                                                return -1;
                                            }
                                            else
                                            {
                                                uint64_t cnt_response3 = 0;

                                                ilist_t *a3;
                                                for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                                {
                                                    cnt_response3 += 1;

                                                    node_t *item3 = (node_t *)a3->value;
                                                    if (item3->kind == NODE_KIND_CLASS)
                                                    {
                                                        if (node1->kind == NODE_KIND_CLASS)
                                                        {
                                                            if (item3->id != node1->id)
                                                            {
                                                                node_class_t *class1 = (node_class_t *)item3->value;
                                                                node_t *node3 = class1->annotation;

                                                                int32_t found1 = 0;
                                                                while (node3 != NULL)
                                                                {
                                                                    node_note_t *note1 = (node_note_t *)node3->value;
                                                                    if (semantic_idstrcmp(note1->key, "General") == 1)
                                                                    {
                                                                        found1 = 1;
                                                                    }
                                                                    else
                                                                    if (semantic_idstrcmp(note1->key, "Union") == 1)
                                                                    {
                                                                        node_t *node4 = note1->arguments;
                                                                        node_block_t *block1 = (node_block_t *)node4->value;

                                                                        ilist_t *a4;
                                                                        for (a4 = block1->list->begin;a4 != block1->list->end;a4 = a4->next)
                                                                        {
                                                                            node_t *item4 = (node_t *)a4->value;
                                                                            if (item4->kind == NODE_KIND_ARGUMENT)
                                                                            {
                                                                                node_argument_t *argument1 = (node_argument_t *)item4->value;
                                                                                
                                                                                list_t *response4 = list_create();
                                                                                if (response4 == NULL)
                                                                                {
                                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }

                                                                                int32_t r4 = semantic_content(program, argument1->key, response4, SEMANTIC_FLAG_NONE);
                                                                                if (r4 == -1)
                                                                                {
                                                                                    return -1;
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint64_t cnt_response4 = 0;

                                                                                    ilist_t *a5;
                                                                                    for (a5 = response4->begin;a5 != response4->end;a5 = a5->next)
                                                                                    {
                                                                                        cnt_response4 += 1;

                                                                                        node_t *item5 = (node_t *)a5->value;
                                                                                        if (item5->kind == NODE_KIND_CLASS)
                                                                                        {
                                                                                            if ((item5->flag & NODE_FLAG_INSTANCE) == NODE_FLAG_INSTANCE)
                                                                                            {
                                                                                                semantic_error(program, item5, "Instance object, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                                    argument1->key->position.path, argument1->key->position.line, argument1->key->position.column, __FILE__, __LINE__);
                                                                                                return -1;
                                                                                            }
                                                                                            if (item5->id == node1->id)
                                                                                            {
                                                                                                found1 = 1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (cnt_response4 == 0)
                                                                                    {
                                                                                        semantic_error(program, argument1->key, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                                        return -1;
                                                                                    }
                                                                                }

                                                                                list_destroy(response4);
                                                                            }
                                                                        }        
                                                                    }

                                                                    node3 = note1->next;
                                                                }

                                                                if (found1 == 0)
                                                                {
                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                    }
                                                    else
                                                    if (item3->kind == NODE_KIND_GENERIC)
                                                    {
                                                        node_t *node3 = item3;
                                                        while (node3 != NULL)
                                                        {
                                                            node_generic_t *generic1 = (node_generic_t *)node3->value;
                                                            if (generic1->type != NULL)
                                                            {
                                                                list_t *response4 = list_create();
                                                                if (response4 == NULL)
                                                                {
                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                    return -1;
                                                                }

                                                                int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                                if (r4 == -1)
                                                                {
                                                                    return -1;
                                                                }
                                                                else
                                                                {
                                                                    uint64_t cnt_response4 = 0;

                                                                    ilist_t *a4;
                                                                    for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                    {
                                                                        cnt_response4 += 1;

                                                                        node_t *item4 = (node_t *)a4->value;
                                                                        if (item4->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            if (node1->kind == NODE_KIND_CLASS)
                                                                            {
                                                                                if (item4->id != node1->id)
                                                                                {
                                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                        }
                                                                        else
                                                                        if (item4->kind == NODE_KIND_GENERIC)
                                                                        {
                                                                            node3 = item4;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (cnt_response4 == 0)
                                                                    {
                                                                        semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                        return -1;
                                                                    }
                                                                }

                                                                list_destroy(response4);
                                                            }
                                                        }
                                                    }
                                                }

                                                if (cnt_response3 == 0)
                                                {
                                                    semantic_error(program, var1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }

                                            list_destroy(response3);
                                        }
                                    }
                                    else
                                    {
                                        if (var1->value_update != NULL)
                                        {
                                            node_t *node2 = var1->value_update;
                                            if (node2->kind == NODE_KIND_CLASS)
                                            {
                                                if (node1->kind == NODE_KIND_CLASS)
                                                {
                                                    if (node1->id != node2->id)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                                else
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            semantic_error(program, var1->key, "Unitialized\n\tInternal:%s-%u" __FILE__, __LINE__);
                                            return -1;
                                        }
                                    }
                                    
                                    var1->value_update = entity1->value_update;
                                    list_destroy(response2);
                                    list_destroy(response1);
                                    return 1;
                                }
                                else
                                {
                                    semantic_error(program, entity1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                    return -1;
                                }
                            }
                            else
                            if (item2->kind == NODE_KIND_PROPERTY)
                            {
                                node_property_t *property1 = (node_property_t *)item2->value;
                                if (property1->value_update != NULL)
                                {
                                    node_t *node1 = property1->value_update;

                                    if (var1->type != NULL)
                                    {
                                        node_t *node2 = var1->type;
                                        if (node2->kind == NODE_KIND_FN)
                                        {
                                            if (node1->kind == NODE_KIND_LAMBDA)
                                            {
                                                node_fn_t *fn1 = (node_fn_t *)node2->value;
                                                node_fun_t *fun1 = (node_fun_t *)node1->value;
                                                int32_t r3 = semantic_eqaul_gsgs(program, fn1->generics, fun1->generics);
                                                if (r3 == -1)
                                                {
                                                    return -1;
                                                }
                                                else
                                                if (r3 == 0)
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                                if (r3 == 1)
                                                {
                                                    int32_t r4 = semantic_eqaul_psps(program, fn1->parameters, fun1->parameters);
                                                    if (r4 == -1)
                                                    {
                                                        return -1;
                                                    }
                                                    else
                                                    if (r4 == 0)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            list_t *response3 = list_create();
                                            if (response3 == NULL)
                                            {
                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                return -1;
                                            }

                                            int32_t r3 = semantic_content(program, var1->type, response3, SEMANTIC_FLAG_NONE);
                                            if (r3 == -1)
                                            {
                                                return -1;
                                            }
                                            else
                                            {
                                                uint64_t cnt_response3 = 0;

                                                ilist_t *a3;
                                                for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                                {
                                                    cnt_response3 += 1;

                                                    node_t *item3 = (node_t *)a3->value;
                                                    if (item3->kind == NODE_KIND_CLASS)
                                                    {
                                                        if (node1->kind == NODE_KIND_CLASS)
                                                        {
                                                            if (item3->id != node1->id)
                                                            {
                                                                node_class_t *class1 = (node_class_t *)item3->value;
                                                                node_t *node3 = class1->annotation;

                                                                int32_t found1 = 0;
                                                                while (node3 != NULL)
                                                                {
                                                                    node_note_t *note1 = (node_note_t *)node3->value;
                                                                    if (semantic_idstrcmp(note1->key, "General") == 1)
                                                                    {
                                                                        found1 = 1;
                                                                    }
                                                                    else
                                                                    if (semantic_idstrcmp(note1->key, "Union") == 1)
                                                                    {
                                                                        node_t *node4 = note1->arguments;
                                                                        node_block_t *block1 = (node_block_t *)node4->value;

                                                                        ilist_t *a4;
                                                                        for (a4 = block1->list->begin;a4 != block1->list->end;a4 = a4->next)
                                                                        {
                                                                            node_t *item4 = (node_t *)a4->value;
                                                                            if (item4->kind == NODE_KIND_ARGUMENT)
                                                                            {
                                                                                node_argument_t *argument1 = (node_argument_t *)item4->value;
                                                                                
                                                                                list_t *response4 = list_create();
                                                                                if (response4 == NULL)
                                                                                {
                                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }

                                                                                int32_t r4 = semantic_content(program, argument1->key, response4, SEMANTIC_FLAG_NONE);
                                                                                if (r4 == -1)
                                                                                {
                                                                                    return -1;
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint64_t cnt_response4 = 0;

                                                                                    ilist_t *a5;
                                                                                    for (a5 = response4->begin;a5 != response4->end;a5 = a5->next)
                                                                                    {
                                                                                        cnt_response4 += 1;

                                                                                        node_t *item5 = (node_t *)a5->value;
                                                                                        if (item5->kind == NODE_KIND_CLASS)
                                                                                        {
                                                                                            if ((item5->flag & NODE_FLAG_INSTANCE) == NODE_FLAG_INSTANCE)
                                                                                            {
                                                                                                semantic_error(program, item5, "Instance object, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                                    argument1->key->position.path, argument1->key->position.line, argument1->key->position.column, __FILE__, __LINE__);
                                                                                                return -1;
                                                                                            }
                                                                                            if (item5->id == node1->id)
                                                                                            {
                                                                                                found1 = 1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (cnt_response4 == 0)
                                                                                    {
                                                                                        semantic_error(program, argument1->key, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                                        return -1;
                                                                                    }
                                                                                }

                                                                                list_destroy(response4);
                                                                            }
                                                                        }        
                                                                    }

                                                                    node3 = note1->next;
                                                                }

                                                                if (found1 == 0)
                                                                {
                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                    }
                                                    else
                                                    if (item3->kind == NODE_KIND_GENERIC)
                                                    {
                                                        node_t *node3 = item3;
                                                        while (node3 != NULL)
                                                        {
                                                            node_generic_t *generic1 = (node_generic_t *)node3->value;
                                                            if (generic1->type != NULL)
                                                            {
                                                                list_t *response4 = list_create();
                                                                if (response4 == NULL)
                                                                {
                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                    return -1;
                                                                }

                                                                int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                                if (r4 == -1)
                                                                {
                                                                    return -1;
                                                                }
                                                                else
                                                                {
                                                                    uint64_t cnt_response4 = 0;

                                                                    ilist_t *a4;
                                                                    for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                    {
                                                                        cnt_response4 += 1;

                                                                        node_t *item4 = (node_t *)a4->value;
                                                                        if (item4->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            if (node1->kind == NODE_KIND_CLASS)
                                                                            {
                                                                                if (item4->id != node1->id)
                                                                                {
                                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                        }
                                                                        else
                                                                        if (item4->kind == NODE_KIND_GENERIC)
                                                                        {
                                                                            node3 = item4;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (cnt_response4 == 0)
                                                                    {
                                                                        semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                        return -1;
                                                                    }
                                                                }

                                                                list_destroy(response4);
                                                            }
                                                        }
                                                    }
                                                }

                                                if (cnt_response3 == 0)
                                                {
                                                    semantic_error(program, var1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }

                                            list_destroy(response3);
                                        }
                                    }
                                    else
                                    {
                                        if (var1->value_update != NULL)
                                        {
                                            node_t *node2 = var1->value_update;
                                            if (node2->kind == NODE_KIND_CLASS)
                                            {
                                                if (node1->kind == NODE_KIND_CLASS)
                                                {
                                                    if (node1->id != node2->id)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                                else
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            semantic_error(program, var1->key, "Unitialized\n\tInternal:%s-%u" __FILE__, __LINE__);
                                            return -1;
                                        }
                                    }
                                    
                                    var1->value_update = property1->value_update;
                                    list_destroy(response2);
                                    list_destroy(response1);
                                    return 1;
                                }
                                else
                                {
                                    if (property1->type != NULL)
                                    {
                                        node_t *node1 = property1->type;

                                        if (node1->kind == NODE_KIND_FN)
                                        {
                                            semantic_error(program, property1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                            return -1;
                                        }
                                        else
                                        {
                                            list_t *response3 = list_create();
                                            if (response3 == NULL)
                                            {
                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                return -1;
                                            }

                                            int32_t r3 = semantic_content(program, property1->type, response3, SEMANTIC_FLAG_NONE);
                                            if (r3 == -1)
                                            {
                                                return -1;
                                            }
                                            else
                                            {
                                                uint64_t cnt_response3 = 0;

                                                ilist_t *a3;
                                                for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                                {
                                                    cnt_response3 += 1;

                                                    node_t *item3 = (node_t *)a3->value;
                                                    if (item3->kind == NODE_KIND_CLASS)
                                                    {
                                                        node_t *clone1 = node_clone(item3->parent, item3);
                                                        if (clone1 == NULL)
                                                        {
                                                            fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                        clone1->flag |= NODE_FLAG_INSTANCE;

                                                        var1->value_update = clone1;
                                                        property1->value_update = clone1;
                                                        break;
                                                    }
                                                    else
                                                    if (item3->kind == NODE_KIND_GENERIC)
                                                    {
                                                        node_t *node2 = item3;
                                                        while (node2 != NULL)
                                                        {
                                                            node_generic_t *generic1 = (node_generic_t *)node2->value;
                                                            if (generic1->type != NULL)
                                                            {
                                                                list_t *response4 = list_create();
                                                                if (response4 == NULL)
                                                                {
                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                    return -1;
                                                                }

                                                                int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                                if (r4 == -1)
                                                                {
                                                                    return -1;
                                                                }
                                                                else
                                                                {
                                                                    uint64_t cnt_response4 = 0;

                                                                    ilist_t *a4;
                                                                    for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                    {
                                                                        cnt_response4 += 1;

                                                                        node_t *item4 = (node_t *)a4->value;
                                                                        if (item4->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            node_t *clone1 = node_clone(item4->parent, item4);
                                                                            if (clone1 == NULL)
                                                                            {
                                                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                            clone1->flag |= NODE_FLAG_INSTANCE;

                                                                            var1->value_update = clone1;
                                                                            property1->value_update = clone1;
                                                                            break;
                                                                        }
                                                                        else
                                                                        if (item4->kind == NODE_KIND_GENERIC)
                                                                        {
                                                                            node2 = item4;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (cnt_response4 == 0)
                                                                    {
                                                                        semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                        return -1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (cnt_response3 == 0)
                                                {
                                                    semantic_error(program, property1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }
                                            list_destroy(response3);

                                            if (property1->value_update == NULL)
                                            {
                                                semantic_error(program, property1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        semantic_error(program, property1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                        return -1;
                                    }
                                }
                            }
                            else
                            if (item2->kind == NODE_KIND_PARAMETER)
                            {
                                node_parameter_t *parameter1 = (node_parameter_t *)item2->value;
                                if (parameter1->value_update != NULL)
                                {
                                    node_t *node1 = parameter1->value_update;

                                    if (var1->type != NULL)
                                    {
                                        node_t *node2 = var1->type;
                                        if (node2->kind == NODE_KIND_FN)
                                        {
                                            if (node1->kind == NODE_KIND_LAMBDA)
                                            {
                                                node_fn_t *fn1 = (node_fn_t *)node2->value;
                                                node_fun_t *fun1 = (node_fun_t *)node1->value;
                                                int32_t r3 = semantic_eqaul_gsgs(program, fn1->generics, fun1->generics);
                                                if (r3 == -1)
                                                {
                                                    return -1;
                                                }
                                                else
                                                if (r3 == 0)
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                                if (r3 == 1)
                                                {
                                                    int32_t r4 = semantic_eqaul_psps(program, fn1->parameters, fun1->parameters);
                                                    if (r4 == -1)
                                                    {
                                                        return -1;
                                                    }
                                                    else
                                                    if (r4 == 0)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            list_t *response3 = list_create();
                                            if (response3 == NULL)
                                            {
                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                return -1;
                                            }

                                            int32_t r3 = semantic_content(program, var1->type, response3, SEMANTIC_FLAG_NONE);
                                            if (r3 == -1)
                                            {
                                                return -1;
                                            }
                                            else
                                            {
                                                uint64_t cnt_response3 = 0;

                                                ilist_t *a3;
                                                for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                                {
                                                    cnt_response3 += 1;

                                                    node_t *item3 = (node_t *)a3->value;
                                                    if (item3->kind == NODE_KIND_CLASS)
                                                    {
                                                        if (node1->kind == NODE_KIND_CLASS)
                                                        {
                                                            if (item3->id != node1->id)
                                                            {
                                                                node_class_t *class1 = (node_class_t *)item3->value;
                                                                node_t *node3 = class1->annotation;

                                                                int32_t found1 = 0;
                                                                while (node3 != NULL)
                                                                {
                                                                    node_note_t *note1 = (node_note_t *)node3->value;
                                                                    if (semantic_idstrcmp(note1->key, "General") == 1)
                                                                    {
                                                                        found1 = 1;
                                                                    }
                                                                    else
                                                                    if (semantic_idstrcmp(note1->key, "Union") == 1)
                                                                    {
                                                                        node_t *node4 = note1->arguments;
                                                                        node_block_t *block1 = (node_block_t *)node4->value;

                                                                        ilist_t *a4;
                                                                        for (a4 = block1->list->begin;a4 != block1->list->end;a4 = a4->next)
                                                                        {
                                                                            node_t *item4 = (node_t *)a4->value;
                                                                            if (item4->kind == NODE_KIND_ARGUMENT)
                                                                            {
                                                                                node_argument_t *argument1 = (node_argument_t *)item4->value;
                                                                                
                                                                                list_t *response4 = list_create();
                                                                                if (response4 == NULL)
                                                                                {
                                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }

                                                                                int32_t r4 = semantic_content(program, argument1->key, response4, SEMANTIC_FLAG_NONE);
                                                                                if (r4 == -1)
                                                                                {
                                                                                    return -1;
                                                                                }
                                                                                else
                                                                                {
                                                                                    uint64_t cnt_response4 = 0;

                                                                                    ilist_t *a5;
                                                                                    for (a5 = response4->begin;a5 != response4->end;a5 = a5->next)
                                                                                    {
                                                                                        cnt_response4 += 1;

                                                                                        node_t *item5 = (node_t *)a5->value;
                                                                                        if (item5->kind == NODE_KIND_CLASS)
                                                                                        {
                                                                                            if ((item5->flag & NODE_FLAG_INSTANCE) == NODE_FLAG_INSTANCE)
                                                                                            {
                                                                                                semantic_error(program, item5, "Instance object, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                                    argument1->key->position.path, argument1->key->position.line, argument1->key->position.column, __FILE__, __LINE__);
                                                                                                return -1;
                                                                                            }
                                                                                            if (item5->id == node1->id)
                                                                                            {
                                                                                                found1 = 1;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (cnt_response4 == 0)
                                                                                    {
                                                                                        semantic_error(program, argument1->key, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                                        return -1;
                                                                                    }
                                                                                }

                                                                                list_destroy(response4);
                                                                            }
                                                                        }        
                                                                    }

                                                                    node3 = note1->next;
                                                                }

                                                                if (found1 == 0)
                                                                {
                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                    return -1;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                    }
                                                    else
                                                    if (item3->kind == NODE_KIND_GENERIC)
                                                    {
                                                        node_t *node3 = item3;
                                                        while (node3 != NULL)
                                                        {
                                                            node_generic_t *generic1 = (node_generic_t *)node3->value;
                                                            if (generic1->type != NULL)
                                                            {
                                                                list_t *response4 = list_create();
                                                                if (response4 == NULL)
                                                                {
                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                    return -1;
                                                                }

                                                                int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                                if (r4 == -1)
                                                                {
                                                                    return -1;
                                                                }
                                                                else
                                                                {
                                                                    uint64_t cnt_response4 = 0;

                                                                    ilist_t *a4;
                                                                    for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                    {
                                                                        cnt_response4 += 1;

                                                                        node_t *item4 = (node_t *)a4->value;
                                                                        if (item4->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            if (node1->kind == NODE_KIND_CLASS)
                                                                            {
                                                                                if (item4->id != node1->id)
                                                                                {
                                                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                    return -1;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                        }
                                                                        else
                                                                        if (item4->kind == NODE_KIND_GENERIC)
                                                                        {
                                                                            node3 = item4;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (cnt_response4 == 0)
                                                                    {
                                                                        semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                        return -1;
                                                                    }
                                                                }

                                                                list_destroy(response4);
                                                            }
                                                        }
                                                    }
                                                }

                                                if (cnt_response3 == 0)
                                                {
                                                    semantic_error(program, var1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }

                                            list_destroy(response3);
                                        }
                                    }
                                    else
                                    {
                                        if (var1->value_update != NULL)
                                        {
                                            node_t *node2 = var1->value_update;
                                            if (node2->kind == NODE_KIND_CLASS)
                                            {
                                                if (node1->kind == NODE_KIND_CLASS)
                                                {
                                                    if (node1->id != node2->id)
                                                    {
                                                        semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                        return -1;
                                                    }
                                                }
                                                else
                                                {
                                                    semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }
                                            else
                                            {
                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                        else
                                        {
                                            semantic_error(program, var1->key, "Unitialized\n\tInternal:%s-%u" __FILE__, __LINE__);
                                            return -1;
                                        }
                                    }
                                    
                                    var1->value_update = parameter1->value_update;
                                    list_destroy(response2);
                                    list_destroy(response1);
                                    return 1;
                                }
                                else
                                {
                                    if (parameter1->type != NULL)
                                    {
                                        node_t *node1 = parameter1->type;

                                        if (node1->kind == NODE_KIND_FN)
                                        {
                                            semantic_error(program, parameter1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                            return -1;
                                        }
                                        else
                                        {
                                            list_t *response3 = list_create();
                                            if (response3 == NULL)
                                            {
                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                return -1;
                                            }

                                            int32_t r3 = semantic_content(program, parameter1->type, response3, SEMANTIC_FLAG_NONE);
                                            if (r3 == -1)
                                            {
                                                return -1;
                                            }
                                            else
                                            {
                                                uint64_t cnt_response3 = 0;

                                                ilist_t *a3;
                                                for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                                {
                                                    cnt_response3 += 1;

                                                    node_t *item3 = (node_t *)a3->value;
                                                    if (item3->kind == NODE_KIND_CLASS)
                                                    {
                                                        node_t *clone1 = node_clone(item3->parent, item3);
                                                        if (clone1 == NULL)
                                                        {
                                                            fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                        clone1->flag |= NODE_FLAG_INSTANCE;

                                                        var1->value_update = clone1;
                                                        parameter1->value_update = clone1;
                                                        break;
                                                    }
                                                    else
                                                    if (item3->kind == NODE_KIND_GENERIC)
                                                    {
                                                        node_t *node2 = item3;
                                                        while (node2 != NULL)
                                                        {
                                                            node_generic_t *generic1 = (node_generic_t *)node2->value;
                                                            if (generic1->type != NULL)
                                                            {
                                                                list_t *response4 = list_create();
                                                                if (response4 == NULL)
                                                                {
                                                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                    return -1;
                                                                }

                                                                int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                                if (r4 == -1)
                                                                {
                                                                    return -1;
                                                                }
                                                                else
                                                                {
                                                                    uint64_t cnt_response4 = 0;

                                                                    ilist_t *a4;
                                                                    for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                    {
                                                                        cnt_response4 += 1;

                                                                        node_t *item4 = (node_t *)a4->value;
                                                                        if (item4->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            node_t *clone1 = node_clone(item4->parent, item4);
                                                                            if (clone1 == NULL)
                                                                            {
                                                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                            clone1->flag |= NODE_FLAG_INSTANCE;

                                                                            var1->value_update = clone1;
                                                                            parameter1->value_update = clone1;
                                                                            break;
                                                                        }
                                                                        else
                                                                        if (item4->kind == NODE_KIND_GENERIC)
                                                                        {
                                                                            node2 = item4;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (cnt_response4 == 0)
                                                                    {
                                                                        semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                        return -1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (cnt_response3 == 0)
                                                {
                                                    semantic_error(program, parameter1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                    return -1;
                                                }
                                            }
                                            list_destroy(response3);

                                            if (parameter1->value_update == NULL)
                                            {
                                                semantic_error(program, parameter1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        semantic_error(program, parameter1->key, "Unitialized, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                        return -1;
                                    }
                                }
                            }
                            else
                            if (item2->kind == NODE_KIND_CLASS)
                            {
                                if ((item2->flag & NODE_FLAG_INSTANCE) != NODE_FLAG_INSTANCE)
                                {
                                    semantic_error(program, binary1->right, "Not an instance, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                        binary1->left->position.path, binary1->left->position.line, binary1->left->position.column, __FILE__, __LINE__);
                                    return -1;
                                }

                                if (var1->type != NULL)
                                {
                                    node_t *node1 = var1->type;
                                    if (node1->kind == NODE_KIND_FN)
                                    {
                                        node_class_t *class1 = (node_class_t *)item2->value;
                                        semantic_error(program, class1->key, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                            var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                        return -1;
                                    }
                                    else
                                    {
                                        list_t *response3 = list_create();
                                        if (response3 == NULL)
                                        {
                                            fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                            return -1;
                                        }

                                        int32_t r3 = semantic_content(program, var1->type, response3, SEMANTIC_FLAG_NONE);
                                        if (r3 == -1)
                                        {
                                            return -1;
                                        }
                                        else
                                        {
                                            uint64_t cnt_response3 = 0;

                                            ilist_t *a3;
                                            for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                            {
                                                cnt_response3 += 1;

                                                node_t *item3 = (node_t *)a3->value;
                                                if (item3->kind == NODE_KIND_CLASS)
                                                {
                                                    if (item3->id != item2->id)
                                                    {
                                                        node_class_t *class1 = (node_class_t *)item3->value;
                                                        node_t *node3 = class1->annotation;

                                                        int32_t found1 = 0;
                                                        while (node3 != NULL)
                                                        {
                                                            node_note_t *note1 = (node_note_t *)node3->value;
                                                            if (semantic_idstrcmp(note1->key, "General") == 1)
                                                            {
                                                                found1 = 1;
                                                            }
                                                            else
                                                            if (semantic_idstrcmp(note1->key, "Union") == 1)
                                                            {
                                                                node_t *node4 = note1->arguments;
                                                                node_block_t *block1 = (node_block_t *)node4->value;

                                                                ilist_t *a4;
                                                                for (a4 = block1->list->begin;a4 != block1->list->end;a4 = a4->next)
                                                                {
                                                                    node_t *item4 = (node_t *)a4->value;
                                                                    if (item4->kind == NODE_KIND_ARGUMENT)
                                                                    {
                                                                        node_argument_t *argument1 = (node_argument_t *)item4->value;
                                                                        
                                                                        list_t *response4 = list_create();
                                                                        if (response4 == NULL)
                                                                        {
                                                                            fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                            return -1;
                                                                        }

                                                                        int32_t r4 = semantic_content(program, argument1->key, response4, SEMANTIC_FLAG_NONE);
                                                                        if (r4 == -1)
                                                                        {
                                                                            return -1;
                                                                        }
                                                                        else
                                                                        {
                                                                            uint64_t cnt_response4 = 0;

                                                                            ilist_t *a5;
                                                                            for (a5 = response4->begin;a5 != response4->end;a5 = a5->next)
                                                                            {
                                                                                cnt_response4 += 1;

                                                                                node_t *item5 = (node_t *)a5->value;
                                                                                if (item5->kind == NODE_KIND_CLASS)
                                                                                {
                                                                                    if ((item5->flag & NODE_FLAG_INSTANCE) == NODE_FLAG_INSTANCE)
                                                                                    {
                                                                                        semantic_error(program, item5, "Instance object, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                            argument1->key->position.path, argument1->key->position.line, argument1->key->position.column, __FILE__, __LINE__);
                                                                                        return -1;
                                                                                    }
                                                                                    if (item5->id == item2->id)
                                                                                    {
                                                                                        found1 = 1;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }

                                                                            if (cnt_response4 == 0)
                                                                            {
                                                                                semantic_error(program, argument1->key, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                        }

                                                                        list_destroy(response4);
                                                                    }
                                                                }        
                                                            }

                                                            node3 = note1->next;
                                                        }

                                                        if (found1 == 0)
                                                        {
                                                            semantic_error(program, class1->key, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                            return -1;
                                                        }
                                                    }
                                                }
                                                else
                                                if (item3->kind == NODE_KIND_GENERIC)
                                                {
                                                    node_t *node3 = item3;
                                                    while (node3 != NULL)
                                                    {
                                                        node_generic_t *generic1 = (node_generic_t *)node3->value;
                                                        if (generic1->type != NULL)
                                                        {
                                                            list_t *response4 = list_create();
                                                            if (response4 == NULL)
                                                            {
                                                                fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                                                return -1;
                                                            }

                                                            int32_t r4 = semantic_content(program, generic1->type, response4, SEMANTIC_FLAG_NONE);
                                                            if (r4 == -1)
                                                            {
                                                                return -1;
                                                            }
                                                            else
                                                            {
                                                                uint64_t cnt_response4 = 0;

                                                                ilist_t *a4;
                                                                for (a4 = response4->begin;a4 != response4->end;a4 = a4->next)
                                                                {
                                                                    cnt_response4 += 1;

                                                                    node_t *item4 = (node_t *)a4->value;
                                                                    if (item4->kind == NODE_KIND_CLASS)
                                                                    {
                                                                        if (node1->kind == NODE_KIND_CLASS)
                                                                        {
                                                                            if (item4->id != node1->id)
                                                                            {
                                                                                semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                                return -1;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            semantic_error(program, node1, "Different types, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                                                var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                                            return -1;
                                                                        }
                                                                    }
                                                                    else
                                                                    if (item4->kind == NODE_KIND_GENERIC)
                                                                    {
                                                                        node3 = item4;
                                                                        break;
                                                                    }
                                                                }

                                                                if (cnt_response4 == 0)
                                                                {
                                                                    semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                                    return -1;
                                                                }
                                                            }

                                                            list_destroy(response4);
                                                        }
                                                    }
                                                }
                                            }

                                            if (cnt_response3 == 0)
                                            {
                                                semantic_error(program, var1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    list_t *response3 = list_create();
                                    if (response3 == NULL)
                                    {
                                        fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                        return -1;
                                    }

                                    int32_t r3 = semantic_expression(program, var1->value, response3, SEMANTIC_FLAG_NONE);
                                    if (r3 == -1)
                                    {
                                        return -1;
                                    }
                                    else
                                    {
                                        uint64_t cnt_response3 = 0;

                                        ilist_t *a3;
                                        for (a3 = response3->begin;a3 != response3->end;a3 = a3->next)
                                        {
                                            cnt_response3 += 1;

                                            node_t *item3 = (node_t *)a3->value;
                                            if (item3->kind == NODE_KIND_CLASS)
                                            {
                                                if ((item3->flag & NODE_FLAG_INSTANCE) != NODE_FLAG_INSTANCE)
                                                {
                                                    node_class_t *class1 = (node_class_t *)item3->value;
                                                    semantic_error(program, class1->key, "Not an instance, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                        var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                    return -1;
                                                }

                                                var1->value_update = item3;

                                            }
                                            else
                                            {
                                                node_class_t *class1 = (node_class_t *)item2->value;
                                                semantic_error(program, class1->key, "Not an instance, for (%s-%lld:%lld)\n\tInternal:%s-%u", 
                                                    var1->key->position.path, var1->key->position.line, var1->key->position.column, __FILE__, __LINE__);
                                                return -1;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (cnt_response2 == 0)
                        {
                            semantic_error(program, binary1->right, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                            return -1;
                        }
                    }
                }
            }

            if (cnt_response1 == 0)
            {
                semantic_error(program, binary1->left, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                return -1;
            }
        }
