node_t *node3 = item4;
while (node3 != NULL)
{
    node_generic_t *generic1 = (node_generic_t *)node3->value;

    if (generic1->type != NULL)
    {
        list_t *response4 = list_create();
        if (response4 == NULL)
        {
            fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
            return -1;
        }

        int32_t r4 = semantic_resolve(program, generic1->type->parent, generic1->type, response4, flag);
        if (r4 == -1)
        {
            return -1;
        }
        else
        {
            uint64_t cnt_response4 = 0;

            ilist_t *a6;
            for (a6 = response4->begin;a6 != response4->end;a6 = a6->next)
            {
                cnt_response4 += 1;
                node_t *item5 = (node_t *)a6->value;

                if (item5->kind == NODE_KIND_CLASS)
                {
                    if ((item5->kind & NODE_FLAG_INSTANCE) != NODE_FLAG_INSTANCE)
                    {
                        semantic_error(program, generic1->type, "Instance, in confronting with (%s-%lld:%lld)",
                            item5->position.path, item5->position.line, item5->position.column);
                        return -1;
                    }

                    node_t *clone2 = node_clone(item5->parent, item5);
                    if (clone2 == NULL)
                    {
                        fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                        return -1;
                    }
                    clone2->flag |= NODE_FLAG_INSTANCE;

                    heritage2->value_update = clone2;

                    node_class_t *class2 = (node_class_t *)clone2->value;

                    node_t *node4 = class2->block;
                    node_block_t *block3 = (node_block_t *)node4->value;

                    ilist_t *a7;
                    for (a7 = block3->list->begin;a7 != block3->list->end;a7 = a7->next)
                    {
                        node_t *item6 = (node_t *)a7->value;
                        if (item6->kind == NODE_KIND_CLASS)
                        {
                            node_class_t *class3 = (node_class_t *)item6->value;
                            if (semantic_idcmp(basic->right, class3->key) == 1)
                            {
                                if ((clone1->flag & NODE_FLAG_INSTANCE) != NODE_FLAG_INSTANCE)
                                {
                                    if ((class3->flag & SYNTAX_MODIFIER_STATIC) != SYNTAX_MODIFIER_STATIC)
                                    {
                                        semantic_error(program, basic->right, "Non-Static, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u",
                                            class3->key->position.path, class3->key->position.line, class3->key->position.column, __FILE__, __LINE__);
                                        return -1;
                                    }
                                }

                                if ((class3->flag & SYNTAX_MODIFIER_EXPORT) != SYNTAX_MODIFIER_EXPORT)
                                {
                                    semantic_error(program, basic->right, "Private access, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u",
                                        class3->key->position.path, class3->key->position.line, class3->key->position.column, __FILE__, __LINE__);
                                    return -1;
                                }

                                ilist_t *r4 = list_rpush(response, item4);
                                if (r4 == NULL)
                                {
                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                    return -1;
                                }
                                continue;
                            }
                        }
                        else
                        if (item6->kind == NODE_KIND_FUN)
                        {
                            node_fun_t *fun2 = (node_fun_t *)item6->value;
                            if (semantic_idcmp(basic->right, fun2->key) == 1)
                            {
                                if ((clone1->flag & NODE_FLAG_INSTANCE) != NODE_FLAG_INSTANCE)
                                {
                                    if ((fun2->flag & SYNTAX_MODIFIER_STATIC) != SYNTAX_MODIFIER_STATIC)
                                    {
                                        semantic_error(program, basic->right, "Non-Static, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u",
                                            fun2->key->position.path, fun2->key->position.line, fun2->key->position.column, __FILE__, __LINE__);
                                        return -1;
                                    }
                                }

                                if ((fun2->flag & SYNTAX_MODIFIER_EXPORT) != SYNTAX_MODIFIER_EXPORT)
                                {
                                    semantic_error(program, basic->right, "Private access, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u",
                                        fun2->key->position.path, fun2->key->position.line, fun2->key->position.column, __FILE__, __LINE__);
                                    return -1;
                                }

                                ilist_t *r4 = list_rpush(response, item4);
                                if (r4 == NULL)
                                {
                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                    return -1;
                                }
                                continue;
                            }
                        }
                        else
                        if (item6->kind == NODE_KIND_PROPERTY)
                        {
                            node_property_t *property2 = (node_property_t *)item6->value;
                            if (semantic_idcmp(basic->right, property2->key) == 1)
                            {
                                if ((clone1->flag & NODE_FLAG_INSTANCE) != NODE_FLAG_INSTANCE)
                                {
                                    if ((property2->flag & SYNTAX_MODIFIER_STATIC) != SYNTAX_MODIFIER_STATIC)
                                    {
                                        semantic_error(program, basic->right, "Non-Static, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u",
                                            property2->key->position.path, property2->key->position.line, property2->key->position.column, __FILE__, __LINE__);
                                        return -1;
                                    }
                                }

                                if ((property2->flag & SYNTAX_MODIFIER_EXPORT) != SYNTAX_MODIFIER_EXPORT)
                                {
                                    semantic_error(program, basic->right, "Private access, in confronting with (%s-%lld:%lld)\n\tInternal:%s-%u",
                                        property2->key->position.path, property2->key->position.line, property2->key->position.column, __FILE__, __LINE__);
                                    return -1;
                                }

                                ilist_t *r4 = list_rpush(response, item4);
                                if (r4 == NULL)
                                {
                                    fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                                    return -1;
                                }
                                continue;
                            }
                        }
                    }

                    ilist_t *r4 = list_rpush(repository1, class2->heritages);
                    if (r4 == NULL)
                    {
                        fprintf(stderr, "Internal:%s-%u\n\tUnable to allocate memory\n", __FILE__, __LINE__);
                        return -1;
                    }
                    
                    node3 = NULL;
                }
                else
                if (item5->kind == NODE_KIND_GENERIC)
                {
                    node3 = item5;
                    break;
                }
            }

            if (cnt_response4 == 0)
            {
                semantic_error(program, generic1->type, "Reference not found\n\tInternal:%s-%u", __FILE__, __LINE__);
                return -1;
            }
        }

        list_destroy(response4);
    }
}