#pragma once

#ifndef __TOKEN_H__
#define __TOKEN_H__

// tokens
enum
{
  TOKEN_EOF = 0,
  TOKEN_SPACE,
  TOKEN_QUTA,	 	//	"
  TOKEN_HASH,	 	//	#
  TOKEN_DOLLER,		//	$
  TOKEN_PRIME,	 	//	'
  TOKEN_LPAREN,		//	(
  TOKEN_RPAREN,		//	)
  TOKEN_COMMA,	 	//	,
  TOKEN_DOT,	   	//	.
  TOKEN_COLON,	 	//	:
  TOKEN_SEMICOLON,	//	;
  TOKEN_QUESTION, 	//	?
  TOKEN_AT,  	 	//	@
  TOKEN_LBRACKET, 	//	[
  TOKEN_BACKSLASH,	//	
  TOKEN_RBRACKET, 	//	]
  TOKEN_UNDERLINE,	//	_
  TOKEN_UPRIME,		//	`
  TOKEN_LBRACE,		//	{
  TOKEN_RBRACE,		//	}
  // Binary Arithmetic 
  TOKEN_PLUS,	 	//	+
  TOKEN_MINUS,	 	//	-
  TOKEN_STAR,	 	//	*
  TOKEN_SLASH,	 	//	/
  TOKEN_PERCENT,	//	%
  // Bit-Wise	&,|,^,~,<<,>>
  TOKEN_AND, 	 	// &
  TOKEN_OR,			// |
  TOKEN_CARET,		// ^
  TOKEN_TILDE,		// ~
  // Relational <,>,<=,>=,==,!=
  TOKEN_LT,	   		//	<
  TOKEN_GT,	   		//	>
  // Logical &&,||,!
  TOKEN_NOT,	   	//	!
  // Assignment =,+=,-=,*=,/=,%=,&=,|=,<<=,>>=
  TOKEN_EQ,	   		//	=

  TOKEN_ID,
  TOKEN_NUMBER,
  TOKEN_CHAR,
  TOKEN_STRING,

  TOKEN_CONTINUE_KEYWORD,
  TOKEN_BREAK_KEYWORD,
  TOKEN_ELSE_KEYWORD,
  TOKEN_IF_KEYWORD,
  TOKEN_TRY_KEYWORD,
  TOKEN_CATCH_KEYWORD,
  TOKEN_THROW_KEYWORD,
  TOKEN_IMPORT_KEYWORD,
  TOKEN_FROM_KEYWORD,
  TOKEN_RETURN_KEYWORD,
  TOKEN_TRUE_KEYWORD, 
  TOKEN_FALSE_KEYWORD, 
  TOKEN_FOR_KEYWORD,
  TOKEN_IN_KEYWORD,
  TOKEN_SIZEOF_KEYWORD,
  TOKEN_TYPEOF_KEYWORD,
  TOKEN_NULL_KEYWORD,
  TOKEN_FUNC_KEYWORD,
  TOKEN_CLASS_KEYWORD,
  TOKEN_EXTENDS_KEYWORD,
  TOKEN_ASYNC_KEYWORD,
  TOKEN_AWAIT_KEYWORD,
  TOKEN_STATIC_KEYWORD,
  TOKEN_PUBLIC_KEYWORD,
  TOKEN_PRIVATE_KEYWORD,
  TOKEN_PROTECTED_KEYWORD,
  TOKEN_READONLY_KEYWORD,
  TOKEN_VAR_KEYWORD,
  TOKEN_CONST_KEYWORD,
  TOKEN_TYPE_KEYWORD,
  TOKEN_ENUM_KEYWORD,
  TOKEN_NAMESPACE_KEYWORD,
  TOKEN_EXPORT_KEYWORD
};


typedef struct token {
	position_t position;
	int32_t type;
	char *value;
} token_t;

const char *
token_get_name(int32_t tp);

#endif //__TOKEN_H__
